{{#each dataObjectMappings}}
--
-- Persistent Staging Area View definition for {{targetDataObject.name}}
--

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[{{../conventions.vdwSchemaName}}].[{{targetDataObject.name}}]') AND type in (N'V'))
DROP VIEW [{{../conventions.vdwSchemaName}}].[{{targetDataObject.name}}]
GO

CREATE VIEW [{{../conventions.vdwSchemaName}}].[{{targetDataObject.name}}] AS

SELECT
   {{#each dataItemMappings}}
   [{{targetDataItem.name}}],
   {{/each}}
   [{{../conventions.loadDateTimeAttribute}}],
   [{{../conventions.eventDateTimeAttribute}}],
   --[{{../conventions.recordSourceAttribute}}],
   [{{../conventions.sourceRowIdAttribute}}],
   [{{../conventions.changeDataCaptureAttribute}}],
   [{{../conventions.recordChecksumAttribute}}],
   [LKP_{{../conventions.recordChecksumAttribute}}],
   [LKP_{{../conventions.changeDataCaptureAttribute}}],
   [KEY_ROW_NUMBER]
FROM 
(
  SELECT
     STG.[{{../conventions.loadDateTimeAttribute}}],
     STG.[{{../conventions.eventDateTimeAttribute}}],
     --STG.[{{../conventions.recordSourceAttribute}}],
     STG.[{{../conventions.sourceRowIdAttribute}}],
     STG.[{{../conventions.changeDataCaptureAttribute}}],
     STG.[{{../conventions.recordChecksumAttribute}}],
     {{#each dataItemMappings}}
     STG.[{{sourceDataItems.0.name}}],
     {{/each}}
     COALESCE(maxsub.[LKP_{{../conventions.recordChecksumAttribute}}], 'N/A') AS [LKP_{{../conventions.recordChecksumAttribute}}],
     COALESCE(maxsub.[LKP_{{../conventions.changeDataCaptureAttribute}}], 'N/A') AS [LKP_{{../conventions.changeDataCaptureAttribute}}],
     CAST(ROW_NUMBER() OVER
        (  PARTITION BY
             {{#each businessKeyDefinitions}}{{#each businessKeyComponentMappings}}STG.[{{sourceDataItems.0.name}}],
             {{/each}}{{/each}}
             STG.[{{../conventions.sourceRowIdAttribute}}]
           ORDER BY
             {{#each businessKeyDefinitions}}{{#each businessKeyComponentMappings}}STG.[{{sourceDataItems.0.name}}],
             {{/each}}{{/each}}
             STG.[{{../conventions.sourceRowIdAttribute}}],
             STG.[{{../conventions.loadDateTimeAttribute}}]
      )  AS INT
    ) AS KEY_ROW_NUMBER
  FROM [{{lookupExtension sourceDataObjects.0.extensions "datastore"}}].[{{lookupExtension sourceDataObjects.0.extensions "location"}}].[{{sourceDataObjects.0.name}}] STG
  LEFT OUTER JOIN -- Prevent reprocessing
    [{{lookupExtension targetDataObject.extensions "datastore"}}].[{{lookupExtension targetDataObject.extensions "location"}}].[{{targetDataObject.name}}] HSTG
    ON
       {{#each businessKeyDefinitions}}  {{#each businessKeyComponentMappings}}
       HSTG.[{{targetDataItem.name}}] = STG.[{{sourceDataItems.0.name}}] AND{{/each}} {{/each}}
       HSTG.[{{../conventions.sourceRowIdAttribute}}] = STG.[{{../conventions.sourceRowIdAttribute}}] AND
       HSTG.[{{../conventions.loadDateTimeAttribute}}] = STG.[{{../conventions.loadDateTimeAttribute}}]
  LEFT OUTER JOIN -- max HSTG checksum
  (
      SELECT {{#each businessKeyDefinitions}}  {{#each businessKeyComponentMappings}}
         A.[{{sourceDataItems.0.name}}], {{/each}} {{/each}}
         A.[{{../conventions.sourceRowIdAttribute}}],  
         A.[{{../conventions.recordChecksumAttribute}}] AS [LKP_{{../conventions.recordChecksumAttribute}}],
         A.[{{../conventions.changeDataCaptureAttribute}}] AS [LKP_{{../conventions.changeDataCaptureAttribute}}]
      FROM [{{lookupExtension targetDataObject.extensions "datastore"}}].[{{lookupExtension targetDataObject.extensions "location"}}].[{{targetDataObject.name}}] A
      JOIN
      (
        SELECT {{#each businessKeyDefinitions}}  {{#each businessKeyComponentMappings}}
          B.[{{sourceDataItems.0.name}}], {{/each}} {{/each}}
          B.[{{../conventions.sourceRowIdAttribute}}],  
          MAX({{../conventions.loadDateTimeAttribute}}) AS MAX_{{../conventions.loadDateTimeAttribute}}
        FROM [{{lookupExtension targetDataObject.extensions "datastore"}}].[{{lookupExtension targetDataObject.extensions "location"}}].[{{targetDataObject.name}}] B
        GROUP BY {{#each businessKeyDefinitions}}  {{#each businessKeyComponentMappings}}
          B.[{{sourceDataItems.0.name}}],{{/each}} {{/each}}
          B.[{{../conventions.sourceRowIdAttribute}}]
     ) C ON
         {{#each businessKeyDefinitions}}  {{#each businessKeyComponentMappings}}
         A.[{{targetDataItem.name}}] = C.[{{targetDataItem.name}}] AND{{/each}} {{/each}}
         A.[{{../conventions.sourceRowIdAttribute}}] = C.[{{../conventions.sourceRowIdAttribute}}] AND
         A.[{{../conventions.loadDateTimeAttribute}}] = C.[MAX_{{../conventions.loadDateTimeAttribute}}]
  ) maxsub ON
     {{#each businessKeyDefinitions}}  {{#each businessKeyComponentMappings}}
     STG.[{{sourceDataItems.0.name}}] = maxsub.[{{targetDataItem.name}}] AND{{/each}} {{/each}}
     STG.[{{../conventions.sourceRowIdAttribute}}] = maxsub.[{{../conventions.sourceRowIdAttribute}}] 
  WHERE {{#each businessKeyDefinitions}}  {{#each businessKeyComponentMappings}} {{#if @first}}
     HSTG.[{{targetDataItem.name}}] IS NULL -- prevent reprocessing{{/if}}{{/each}} {{/each}}
) sub
WHERE
(
  KEY_ROW_NUMBER=1
  AND
  (
    ( {{../conventions.recordChecksumAttribute}} != LKP_{{../conventions.recordChecksumAttribute}} )
    -- The checksums are different
    OR
    ( [{{../conventions.recordChecksumAttribute}}] = [LKP_{{../conventions.recordChecksumAttribute}}] AND     
      [{{../conventions.changeDataCaptureAttribute}}] != [LKP_{{../conventions.changeDataCaptureAttribute}}] )
    -- The checksums are the same but the CDC is different
    -- In other words, if the hash is the same AND the CDC operation is the same then there is no change
  )
)
OR
(
  -- It's not the most recent change in the set, so the record can be inserted as-is
  KEY_ROW_NUMBER!=1
)

{{/each}}