{{#each dataObjectMappings}}
GO
--
-- Hub ETL procedure for {{targetDataObject.name}}, coming from {{sourceDataObjects.0.name}}
--

CREATE OR ALTER PROCEDURE [usp_{{targetDataObject.name}}_{{sourceDataObjects.0.name}}]
  @BatchInstanceId INT = 0,
  @Debug VARCHAR(1) = 'N'
AS

/* For debugging purposes */
/* For debugging purposes */
DECLARE @Reset VARCHAR(10) = 'N';
DECLARE @Module_id INT;

 -- Module Registration
INSERT INTO [{{lookupExtension ../../extensions "controlFrameworkDataStore"}}].[{{lookupExtension ../../extensions "controlFrameworkLocation"}}].MODULE (MODULE_CODE, MODULE_DESCRIPTION, MODULE_TYPE, DATA_OBJECT_SOURCE, DATA_OBJECT_TARGET, AREA_CODE, FREQUENCY_CODE, INACTIVE_INDICATOR)
SELECT *
FROM 
(
  VALUES ('m_200_{{targetDataObject.name}}_{{sourceDataObjects.0.name}}', 'Data logistics from {{sourceDataObjects.0.name}} to {{targetDataObject.name}}', 'SQL', 'None', '[{{lookupExtension targetDataObject.extensions "datastore"}}].[{{lookupExtension targetDataObject.extensions "location"}}].[{{targetDataObject.name}}]','INT','Continuous', 'N')    
) AS refData( MODULE_CODE, MODULE_DESCRIPTION, MODULE_TYPE, DATA_OBJECT_SOURCE, DATA_OBJECT_TARGET, AREA_CODE, FREQUENCY_CODE, INACTIVE_INDICATOR)
WHERE NOT EXISTS 
(
  SELECT NULL
  FROM [{{lookupExtension ../../extensions "controlFrameworkDataStore"}}].[{{lookupExtension ../../extensions "controlFrameworkLocation"}}].MODULE module
  WHERE module.MODULE_CODE = refData.MODULE_CODE
);

-- Clean up and reset
SELECT @Module_id = module_id FROM [{{lookupExtension ../../extensions "controlFrameworkDataStore"}}].[{{lookupExtension ../../extensions "controlFrameworkLocation"}}].module WHERE module_code = 'm_200_{{targetDataObject.name}}_{{sourceDataObjects.0.name}}'

IF @Reset = 'Y'
  BEGIN
    DELETE FROM [{{lookupExtension ../../extensions "controlFrameworkDataStore"}}].[{{lookupExtension ../../extensions "controlFrameworkLocation"}}].event_log WHERE MODULE_INSTANCE_ID IN (SELECT MODULE_INSTANCE_ID FROM [{{lookupExtension ../../extensions "controlFrameworkDataStore"}}].[{{lookupExtension ../../extensions "controlFrameworkLocation"}}].module_instance WHERE MODULE_ID=@Module_id)
    DELETE FROM [{{lookupExtension ../../extensions "controlFrameworkDataStore"}}].[{{lookupExtension ../../extensions "controlFrameworkLocation"}}].source_control WHERE MODULE_INSTANCE_ID IN (SELECT MODULE_INSTANCE_ID FROM [{{lookupExtension ../../extensions "controlFrameworkDataStore"}}].[{{lookupExtension ../../extensions "controlFrameworkLocation"}}].module_instance WHERE MODULE_ID=@Module_id)
    DELETE FROM [{{lookupExtension ../../extensions "controlFrameworkDataStore"}}].[{{lookupExtension ../../extensions "controlFrameworkLocation"}}].module_instance WHERE MODULE_ID=@Module_id
    DELETE FROM [{{lookupExtension ../../extensions "controlFrameworkDataStore"}}].[{{lookupExtension ../../extensions "controlFrameworkLocation"}}].batch_module where module_id = @Module_id
  END

/* End of debugging block */


/* Start new Module Instance */
DECLARE @ModuleCode VARCHAR(255) = 'm_200_{{targetDataObject.name}}_{{sourceDataObjects.0.name}}'

BEGIN
  -- Module Execution Return Value
  DECLARE @QueryResult VARCHAR(MAX);

  -- Create Module Instance
  DECLARE @ModuleInstanceId INT
  EXEC [{{lookupExtension ../../extensions "controlFrameworkDataStore"}}].[{{lookupExtension ../../extensions "controlFrameworkLocation"}}].[CreateModuleInstance]
    @ModuleCode = @ModuleCode,
    @Debug = @Debug,
    @BatchInstanceId = @BatchInstanceId, -- The Batch Instance Id, if the Module is run from a Batch.
    @ModuleInstanceId = @ModuleInstanceId OUTPUT;

  -- Module Evaluation
  DECLARE @ProcessIndicator VARCHAR(10);
  EXEC [{{lookupExtension ../../extensions "controlFrameworkDataStore"}}].[{{lookupExtension ../../extensions "controlFrameworkLocation"}}].[ModuleEvaluation]
    @ModuleInstanceId = @ModuleInstanceId,
    @Debug = @Debug,
    @ProcessIndicator = @ProcessIndicator OUTPUT;

  IF @Debug = 'Y'
    PRINT @ProcessIndicator;

  IF @ProcessIndicator NOT IN ('Abort','Cancel') -- These are end-states for the process.
    BEGIN TRY

      /*
        Main ETL block
      */

       INSERT INTO [{{lookupExtension targetDataObject.extensions "datastore"}}].[{{lookupExtension targetDataObject.extensions "location"}}].[{{targetDataObject.name}}]
       (
         [{{#each businessKeyDefinitions}}{{#if @first}}{{surrogateKey}}{{/if}}{{/each}}],{{#each businessKeyDefinitions}}{{#if @first}}{{#each businessKeyComponentMappings}}
         [{{targetDataItem.name}}],{{/each}}{{/if}}{{/each}}
         [MODULE_INSTANCE_ID],
         [{{../metadataConfiguration.loadDateTimeAttribute}}],
         [{{../metadataConfiguration.recordSourceAttribute}}]
       )
       SELECT
         hub_view.[{{#each businessKeyDefinitions}}{{#if @first}}{{surrogateKey}}{{/if}}{{/each}}],{{#each businessKeyDefinitions}}{{#if @first}}{{#each businessKeyComponentMappings}}
         hub_view.[{{targetDataItem.name}}],{{/each}}{{/if}}{{/each}}
         @ModuleInstanceId AS [MODULE_INSTANCE_ID],
         hub_view.[{{../metadataConfiguration.loadDateTimeAttribute}}],
         hub_view.[{{../metadataConfiguration.recordSourceAttribute}}]
       FROM [{{../metadataConfiguration.vdwSchemaName}}].[{{targetDataObject.name}}] hub_view
       LEFT OUTER JOIN [{{lookupExtension targetDataObject.extensions "datastore"}}].[{{lookupExtension targetDataObject.extensions "location"}}].[{{targetDataObject.name}}] hub_table
          ON hub_view.[{{#each businessKeyDefinitions}}{{#if @first}}{{surrogateKey}}{{/if}}{{/each}}] = hub_table.[{{#each businessKeyDefinitions}}{{#if @first}}{{surrogateKey}}{{/if}}{{/each}}]
       WHERE hub_table.[{{#each businessKeyDefinitions}}{{#if @first}}{{surrogateKey}}{{/if}}{{/each}}] IS NULL  

      DECLARE @RowCountInsert INT= @@ROWCOUNT;

      IF @Debug = 'Y'
        PRINT CONVERT(VARCHAR(10),@RowCountInsert)+' rows inserted';

      /*
        Wrap up
      */

      IF @Debug = 'Y'
        PRINT 'Success pathway';

      -- Module Success
      EXEC [{{lookupExtension ../../extensions "controlFrameworkDataStore"}}].[{{lookupExtension ../../extensions "controlFrameworkLocation"}}].[UpdateModuleInstance]
        @ModuleInstanceId            = @ModuleInstanceId,
        @RowCountSelect              = 0,
        @RowCountInsert               = @RowCountInsert,
        @Debug                              = @Debug,
        @EventCode                       = 'Success'

      SET @QueryResult  = 'Success';

    END TRY

    BEGIN CATCH
      IF @Debug = 'Y'
        PRINT 'Failure pathway';

        -- Module Failure
      EXEC [{{lookupExtension ../../extensions "controlFrameworkDataStore"}}].[{{lookupExtension ../../extensions "controlFrameworkLocation"}}].[UpdateModuleInstance]
        @ModuleInstanceId = @ModuleInstanceId,
        @Debug                   = @Debug,
        @EventCode            = 'Failure';

      SET @QueryResult = 'Failure';

      -- Logging
      DECLARE
        @EventDetail VARCHAR(4000) = ERROR_MESSAGE(),
        @EventReturnCode int               = ERROR_NUMBER();

      EXEC [{{lookupExtension ../../extensions "controlFrameworkDataStore"}}].[{{lookupExtension ../../extensions "controlFrameworkLocation"}}].[InsertIntoEventLog]
        @ModuleInstanceId  = @ModuleInstanceId,
        @EventDetail            = @EventDetail,
        @EventReturnCode  = @EventReturnCode;

      THROW
    END CATCH

  ELSE
    SET @QueryResult = @ProcessIndicator;

  -- End of procedure
END
{{/each}}
