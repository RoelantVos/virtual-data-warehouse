{{#each dataObjectMappings}}
--
-- Satellite View definition for {{../dataObjectMappings.0.targetDataObject.name}} with delivery key.
--
-- This template represents a standard Data Vault style 'Satellite' table as a view.
-- The view shows the same data as would otherwise be the case if the table would be created and all data logistics processes run.
-- This particular template has been extended with a 'delivery key' to illustrate deterministic dimension key generation.
--

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[{{../conventions.vdwSchemaName}}].[{{../dataObjectMappings.0.targetDataObject.name}}]') AND type in (N'V'))
DROP VIEW [{{../conventions.vdwSchemaName}}].[{{../dataObjectMappings.0.targetDataObject.name}}]
GO

CREATE VIEW [{{../conventions.vdwSchemaName}}].[{{targetDataObject.name}}] AS
SELECT 
    HASHBYTES('MD5', {{#each businessKeyDefinitions}} {{!-- Create the Surrogate Key using the Business Key and components --}}
    {{#each businessKeyComponentMappings}}
      ISNULL(RTRIM(CONVERT(NVARCHAR(100), {{targetDataItem.name}})), 'N/A') + '#~!'{{#unless @last}} +{{/unless}} 
    {{/each}}
    ) AS [{{surrogateKey}}],{{/each}}
    --DATEADD(mcs,[{{../conventions.sourceRowIdAttribute}}], {{../conventions.loadDateTimeAttribute}}) AS {{../conventions.loadDateTimeAttribute}},
    [{{../conventions.loadDateTimeAttribute}}],
    [{{../conventions.sourceRowIdAttribute}}],
    --COALESCE (
    --  LEAD (DATEADD(mcs,[{{../conventions.sourceRowIdAttribute}}], {{../conventions.loadDateTimeAttribute}}) ) OVER
    --  ( PARTITION BY {{#each businessKeyDefinitions}}
    --      {{#each businessKeyComponentMappings}}
    --      {{targetDataItem.name}}{{#unless @last}},{{/unless}}{{/each}}{{/each}}
    --     {{#each dataItemMappings}}{{#each targetDataItem.classifications}}{{#if classification}},{{../sourceDataItems.0.name}}{{/if}}{{/each}}{{/each}}
    --   ORDER BY {{../conventions.loadDateTimeAttribute}}),
    --   CAST( '9999-12-31' AS DATETIME)
    --) AS [{{../conventions.expiryDateTimeAttribute}}],
    --CASE
    --  WHEN ( RANK() OVER (PARTITION BY {{#each businessKeyDefinitions}} {{#each businessKeyComponentMappings}}
    --      {{targetDataItem.name}}{{#unless @last}},{{/unless}}{{/each}}{{/each}}
    --     {{#each dataItemMappings}}{{#each targetDataItem.classifications}}{{#if classification}},{{../sourceDataItems.0.name}}{{/if}}{{/each}}{{/each}}
    --     ORDER BY {{../conventions.loadDateTimeAttribute}} desc )) = 1
    --   THEN 'Y'
    --   ELSE 'N'
    --END AS [CURRENT_RECORD_INDICATOR],
    -1 AS {{../conventions.etlProcessAttribute}}, {{!-- List out the Control Framework attributes --}}
    {{../conventions.changeDataCaptureAttribute}},
    --{{../conventions.recordSourceAttribute}},
    --CASE
    --  WHEN {{../conventions.changeDataCaptureAttribute}} = 'D' THEN 'Y'
    --  ELSE 'N'
    --END AS [DELETED_RECORD_INDICATOR],
    HASHBYTES('MD5',
      ISNULL(RTRIM(CONVERT(NVARCHAR(100),{{../conventions.changeDataCaptureAttribute}})), 'N/A') + '#~!' +{{#each dataItemMappings}}
      ISNULL(RTRIM(CONVERT(NVARCHAR(100),{{targetDataItem.name}})), 'N/A') + '#~!'{{#unless @last}} +{{/unless}}{{/each}}
    ) AS [{{../conventions.recordChecksumAttribute}}],
    {{#each dataItemMappings}}
    [{{targetDataItem.name}}],
    {{/each}}
    ROW_NUMBER() OVER (
          ORDER BY {{#each businessKeyDefinitions}}{{#each businessKeyComponentMappings}} {{!-- Create a row number to enable selection only the earliest row, ordered by date/time --}}
          {{targetDataItem.name}},{{/each}}{{/each}}
          {{#each dataItemMappings}}{{#each targetDataItem.classifications}}{{#if classification}}{{../targetDataItem.name}},{{/if}}{{/each}}{{/each}}
          {{../conventions.loadDateTimeAttribute}},
          {{../conventions.sourceRowIdAttribute}}
    ) AS DATA_DELIVERY_KEY,
    CONVERT(NUMERIC(38,0), LEFT(REPLACE(REPLACE(REPLACE(REPLACE(CONVERT(CHAR(27), CAST(STATE_TIMESTAMP AS DATETIME2(7))), '-', ''), ' ', ''), ':', ''), '.', ''), 21)
    + RIGHT('0000000000' + CONVERT(VARCHAR(38), 1), 10)  
    + RIGHT('0000000' + CONVERT(VARCHAR(38), {{../conventions.sourceRowIdAttribute}}), 7)
    ) AS STATE_TIMESTAMP_KEY
FROM
   (
      SELECT 
         [{{../conventions.loadDateTimeAttribute}}],
         [{{../conventions.eventDateTimeAttribute}}],
         --[{{../conventions.recordSourceAttribute}}],
         [{{../conventions.sourceRowIdAttribute}}],
         [{{../conventions.changeDataCaptureAttribute}}],{{#each businessKeyDefinitions}}{{#each businessKeyComponentMappings}}
         {{targetDataItem.name}},{{/each}}{{/each}}
         {{#each dataItemMappings}}
         {{targetDataItem.name}},
         {{/each}}
         [COMBINED_VALUE],
         CASE 
           WHEN LAG(COMBINED_VALUE,1,0x00000000000000000000000000000000) OVER (PARTITION BY {{#each businessKeyDefinitions}} {{#each businessKeyComponentMappings}}
              {{targetDataItem.name}}{{#unless @last}},{{/unless}}{{/each}}{{/each}} 
             {{#each dataItemMappings}}{{#each targetDataItem.classifications}}{{#if classification}},{{../targetDataItem.name}}{{/if}}{{/each}}{{/each}}
             ORDER BY [{{../conventions.loadDateTimeAttribute}}] ASC, [{{../conventions.eventDateTimeAttribute}}] ASC, [{{../conventions.changeDataCaptureAttribute}}] DESC) = COMBINED_VALUE
           THEN 'Same'
           ELSE 'Different'
         END AS [VALUE_CHANGE_INDICATOR],
         CASE 
           WHEN LAG([{{../conventions.changeDataCaptureAttribute}}],1,'') OVER (PARTITION BY {{#each businessKeyDefinitions}} {{#each businessKeyComponentMappings}}
              {{targetDataItem.name}}{{#unless @last}},{{/unless}}{{/each}}{{/each}}
             {{#each dataItemMappings}}{{#each targetDataItem.classifications}}{{#if classification}},{{../targetDataItem.name}}{{/if}}{{/each}}{{/each}}
             ORDER BY [{{../conventions.loadDateTimeAttribute}}] ASC, [{{../conventions.eventDateTimeAttribute}}] ASC, [{{../conventions.changeDataCaptureAttribute}}] ASC) = [{{../conventions.changeDataCaptureAttribute}}]
           THEN 'Same'
           ELSE 'Different'
         END AS [CDC_CHANGE_INDICATOR],
         CASE 
           WHEN LEAD([{{../conventions.loadDateTimeAttribute}}],1,'9999-12-31') OVER (PARTITION BY {{#each businessKeyDefinitions}} {{#each businessKeyComponentMappings}}
              {{targetDataItem.name}}{{#unless @last}},{{/unless}}{{/each}}{{/each}}
             {{#each dataItemMappings}}{{#each targetDataItem.classifications}}{{#if classification}},{{../targetDataItem.name}}{{/if}}{{/each}}{{/each}}
             ORDER BY [{{../conventions.loadDateTimeAttribute}}] ASC, [{{../conventions.eventDateTimeAttribute}}] ASC, [{{../conventions.changeDataCaptureAttribute}}] ASC) = [{{../conventions.loadDateTimeAttribute}}]
           THEN 'Same'
           ELSE 'Different'
         END AS [TIME_CHANGE_INDICATOR]
      FROM
      (
        SELECT
          [{{../conventions.loadDateTimeAttribute}}],
          [{{../conventions.eventDateTimeAttribute}}],
          --[{{../conventions.recordSourceAttribute}}],
          [{{../conventions.sourceRowIdAttribute}}],
          [{{../conventions.changeDataCaptureAttribute}}],{{#each businessKeyDefinitions}} {{#each businessKeyComponentMappings}}
          CAST ({{sourceDataItems.0.name}} AS NVARCHAR(100)) AS [{{targetDataItem.name}}],{{/each}}{{/each}}        
          {{#each dataItemMappings}}
          [{{sourceDataItems.0.name}}] AS [{{targetDataItem.name}}],
          {{/each}}
           HASHBYTES('MD5',{{#each dataItemMappings}}
            ISNULL(RTRIM(CONVERT(NVARCHAR(100),{{sourceDataItems.0.name}})), 'N/A') + '#~!'{{#unless @last}} +{{/unless}}{{/each}}
           ) AS [COMBINED_VALUE]
        FROM [{{lookupExtension sourceDataObjects.0.extensions "datastore"}}].[{{lookupExtension sourceDataObjects.0.extensions "location"}}].[{{sourceDataObjects.0.name}}]
      {{#if filterCriterion}}WHERE {{filterCriterion}} {{/if}}
   ) sub
) combined_value
WHERE 
  ( [VALUE_CHANGE_INDICATOR] ='Different' and  [{{../conventions.changeDataCaptureAttribute}}] in ('C')) 
  OR
  ( [CDC_CHANGE_INDICATOR] = 'Different' and [TIME_CHANGE_INDICATOR] = 'Different')
{{/each}}
